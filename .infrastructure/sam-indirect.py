#!/usr/bin/python
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
"""CLI tool to CloudFormation-parameterize S3 asset URIs generated by AWS SAM

This allows working with toolchains where assets from the initial SAM build are automatically
migrated to some other bucket/prefix before template deployment.

You could probably do much the same thing in shell with a tool like jq, but Python gives lots of
flexibility to customize and extend where needed.
"""
# Python Built-Ins:
import argparse
import json


def parse_args():
    parser = argparse.ArgumentParser(
        description="Utility to parameterize asset locations in SAM-generated JSON templates"
    )
    parser.add_argument(
        "infile",
        type=str,
        help="Path to input JSON template file generated by AWS SAM",
    )
    parser.add_argument(
        "outfile",
        type=str,
        help="Path to output file to save modified template",
    )
    parser.add_argument(
        "--source-s3-prefix",
        required=True,
        type=str,
        help="--s3-prefix from the SAM package command used to generate the input template",
    )
    parser.add_argument(
        "--bucket-param-name",
        default="AssetsBucketName",
        type=str,
        help="Name of the CFN parameter to insert for S3 asset bucket name",
    )
    parser.add_argument(
        "--prefix-param-name",
        default="AssetsBucketPrefix",
        type=str,
        help="Name of the CFN parameter to insert for S3 asset prefix (subfolder)",
    )
    return parser.parse_args()


def main(args):
    print(f"Loading input template... {args.infile}")
    with open(args.infile, "r") as fin:
        template = json.loads(fin.read())

    # We can auto-discover SAM asset bucket from the input template, don't need a parameter for it:
    source_s3_bucket = None
    other_s3_buckets = set()  # ...And warn if multiple are discovered

    print("\nAdjusting asset URIs...")
    resources = template.get("Resources", {})
    n_edited = 0
    for resname in resources:
        resprops = resources[resname].get("Properties", {})
        for asset_attr in ("ContentUri", "CodeUri"):
            if (
                asset_attr in resprops
                and isinstance(resprops[asset_attr], str)
                and resprops[asset_attr].lower().startswith("s3://")
            ):
                bucket, _, key = resprops[asset_attr][len("s3://"):].partition("/")

                if source_s3_bucket is None:
                    source_s3_bucket = bucket
                elif bucket != source_s3_bucket:
                    other_s3_buckets.add(bucket)  # Unexpected, warn about these later

                if not key.startswith(args.source_s3_prefix):
                    print(f" - Skipped {resname}.{asset_attr} (non-matching S3 prefix)")
                else:
                    resprops[asset_attr] = {
                        "Bucket": {"Ref": args.bucket_param_name},
                        "Key": {
                            "Fn::Sub": "".join((
                                "${",
                                args.prefix_param_name,
                                "}",
                                key[len(args.source_s3_prefix):]
                            )),
                        },
                    }
                    n_edited += 1
                    print(f" - Parameterized {resname}.{asset_attr}")
                    
    print(f"\nEdited {n_edited} resource properties\n")

    # Insert the CFn parameters using source bucket/prefix as defaults:
    print("Inserting CFn parameters...")
    if "Parameters" not in template:
        template["Parameters"] = {}
    parameters = template["Parameters"]
    if args.bucket_param_name in parameters:
        raise ValueError(
            f"Source template already contains parameter name '{args.bucket_param_name}'"
        )
    bucket_param = {
        "Type": "String",
        "Description": (
            "Name of the S3 bucket in which SAM artifacts are (already) staged for deployment"
        ),
    }
    if source_s3_bucket is not None:
        bucket_param["Default"] = source_s3_bucket
    parameters[args.bucket_param_name] = bucket_param
    parameters[args.prefix_param_name] = {
        "Type": "String",
        "Description": (
            "Prefix in the S3 bucket where SAM artifacts are (already) staged for deployment"
        ),
        "Default": args.source_s3_prefix,
    }
    print(f"Created CFn parameters: '{args.bucket_param_name}' and '{args.prefix_param_name}'\n")

    if len(other_s3_buckets) > 0:
        print(
            "WARNING: Mapped multiple S3 buckets from the source template to one CFn parameter."
            "\n  %s\n" % ([source_s3_bucket] + list(other_s3_buckets))
        )

    print(f"Writing output to {args.outfile}")
    with open(args.outfile, "w") as fout:
        fout.write(json.dumps(template, indent=2))


if __name__ == "__main__":
    args = parse_args()
    main(args)
